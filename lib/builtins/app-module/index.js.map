{"version":3,"sources":["../../../src/builtins/app-module/index.js"],"names":["path","require","fs","localConfig","steps","packageConfig","getTemplatePath","updateServerConfig_","app","options","serverConfigFileName","serverConfigFile","join","workingPath","serverConfig","readJson","route","appDir","appRouting","name","log","Error","writeJson","spaces","module","exports","requireFilesExist_","rootTemplatePath","appMode","copyFilesFromTemplate_","targetPath","ensureDirSync","templatePath","createOptionalFiles_","updatePackageJson_","config","addPackages","npmInstall_"],"mappings":";;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAASD,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,UAAD,CAA3B;;AACA,MAAM;AAAEG,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAA2BJ,OAAO,CAAC,OAAD,CAAxC;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,6BAAD,CAA/B;;AAEA,eAAeM,mBAAf,CAAmCC,GAAnC,EAAwCC,OAAxC,EAAiD;AAC7C,QAAMC,oBAAoB,GAAG,0BAA7B;AACA,QAAMC,gBAAgB,GAAGX,IAAI,CAACY,IAAL,CAAUH,OAAO,CAACI,WAAlB,EAA+BH,oBAA/B,CAAzB;AACA,QAAMI,YAAY,GAAG,MAAMZ,EAAE,CAACa,QAAH,CAAYJ,gBAAZ,CAA3B;AACA,QAAMK,KAAK,GAAI,IAAGP,OAAO,CAACQ,MAAO,EAAjC;;AAEA,MAAIH,YAAY,CAACI,UAAjB,EAA6B;AACzB,QAAIF,KAAK,IAAIF,YAAY,CAACI,UAA1B,EAAsC;AAClC,UAAIJ,YAAY,CAACI,UAAb,CAAwBF,KAAxB,EAA+BG,IAA/B,KAAwCV,OAAO,CAACQ,MAApD,EAA4D;AACxDT,QAAAA,GAAG,CAACY,GAAJ,CAAQ,MAAR,EAAgB,kHAAhB;AACA;AACH;;AAED,YAAM,IAAIC,KAAJ,CAAW,UAASL,KAAM,mBAA1B,CAAN;AACH;AACJ,GATD,MASO;AACHF,IAAAA,YAAY,CAACI,UAAb,GAA0B,EAA1B;AACH;;AAEDJ,EAAAA,YAAY,CAACI,UAAb,CAAwBF,KAAxB,IAAiC;AAC7BG,IAAAA,IAAI,EAAEV,OAAO,CAACQ,MADe;AAE7BR,IAAAA,OAAO,EAAE;AAFoB,GAAjC;AAKA,QAAMP,EAAE,CAACoB,SAAH,CAAaX,gBAAb,EAA+BG,YAA/B,EAA6C;AAAES,IAAAA,MAAM,EAAE;AAAV,GAA7C,CAAN;AACAf,EAAAA,GAAG,CAACY,GAAJ,CAAQ,MAAR,EAAiB,kDAAiDV,oBAAqB,EAAvF;AACH;;AAEDc,MAAM,CAACC,OAAP,GAAiB,OAAOjB,GAAP,EAAYC,OAAZ,KAAwB;AACrCA,EAAAA,OAAO,GAAG,EACN,GAAGN,WADG;AAEN,OAAGM;AAFG,GAAV;AAKA,QAAML,KAAK,CAACsB,kBAAN,CAAyBlB,GAAzB,EAA8BC,OAAO,CAACI,WAAtC,EAAmD,CACrD,cADqD,EAErD,0BAFqD,CAAnD,CAAN;AAKA,QAAMc,gBAAgB,GAAGrB,eAAe,CAACG,OAAO,CAACmB,OAAT,EAAkB,MAAlB,CAAxC;AACA,QAAMxB,KAAK,CAACyB,sBAAN,CAA6BrB,GAA7B,EAAkCmB,gBAAlC,EAAoDlB,OAAO,CAACI,WAA5D,EAAyEJ,OAAzE,EAAkF,IAAlF,CAAN;AAEA,QAAMqB,UAAU,GAAG9B,IAAI,CAACY,IAAL,CAAUH,OAAO,CAACI,WAAlB,EAA+B,aAA/B,EAA8CJ,OAAO,CAACQ,MAAtD,CAAnB;AACAf,EAAAA,EAAE,CAAC6B,aAAH,CAAiBD,UAAjB;AAEA,QAAME,YAAY,GAAG1B,eAAe,CAACG,OAAO,CAACmB,OAAT,EAAkB,QAAlB,CAApC;AACA,QAAMxB,KAAK,CAACyB,sBAAN,CAA6BrB,GAA7B,EAAkCwB,YAAlC,EAAgDF,UAAhD,EAA4DrB,OAA5D,CAAN;AAEA,QAAML,KAAK,CAAC6B,oBAAN,CAA2BzB,GAA3B,EAAgCsB,UAAhC,EAA4CrB,OAA5C,CAAN;AAEA,QAAMF,mBAAmB,CAACC,GAAD,EAAMC,OAAN,CAAzB;AAEA,QAAML,KAAK,CAAC8B,kBAAN,CAAyB1B,GAAzB,EAA8BsB,UAA9B,EAA2CK,MAAD,IAAY9B,aAAa,CAAC+B,WAAd,CAA0BD,MAA1B,EAAkC1B,OAAlC,CAAtD,CAAN;AAEA,QAAML,KAAK,CAACiC,WAAN,CAAkB7B,GAAlB,EAAuBC,OAAO,CAACI,WAA/B,EAA4CJ,OAA5C,CAAN;AACH,CA3BD","sourcesContent":["const path = require(\"path\");\nconst { fs } = require('@genx/sys');\nconst localConfig = require(\"./config\");\nconst { steps, packageConfig } = require(\"../..\");\nconst getTemplatePath = require(\"../../utils/getTemplatePath\");\n\nasync function updateServerConfig_(app, options) {\n    const serverConfigFileName = 'conf/server.default.json';\n    const serverConfigFile = path.join(options.workingPath, serverConfigFileName);\n    const serverConfig = await fs.readJson(serverConfigFile);\n    const route = `/${options.appDir}`;\n\n    if (serverConfig.appRouting) {\n        if (route in serverConfig.appRouting) {\n            if (serverConfig.appRouting[route].name === options.appDir) {\n                app.log('info', 'Skipped updating the server default config. The app module has already been added into the \"appRouting\" section.');\n                return;\n            }\n\n            throw new Error(`Route \"${route}\" already exists.`);\n        }\n    } else {\n        serverConfig.appRouting = {};\n    }    \n\n    serverConfig.appRouting[route] = {\n        name: options.appDir,\n        options: {}\n    };\n\n    await fs.writeJson(serverConfigFile, serverConfig, { spaces: 4 });\n    app.log('info', `Updated \"appRouting\" in server default config: ${serverConfigFileName}`);\n}\n\nmodule.exports = async (app, options) => {\n    options = {\n        ...localConfig,\n        ...options,\n    };    \n\n    await steps.requireFilesExist_(app, options.workingPath, [\n        'package.json',\n        'conf/server.default.json'\n    ]);\n\n    const rootTemplatePath = getTemplatePath(options.appMode, 'root');\n    await steps.copyFilesFromTemplate_(app, rootTemplatePath, options.workingPath, options, true /**skip overriding */);\n\n    const targetPath = path.join(options.workingPath, 'app_modules', options.appDir);\n    fs.ensureDirSync(targetPath);\n\n    const templatePath = getTemplatePath(options.appMode, 'module');\n    await steps.copyFilesFromTemplate_(app, templatePath, targetPath, options);\n\n    await steps.createOptionalFiles_(app, targetPath, options);\n\n    await updateServerConfig_(app, options);   \n    \n    await steps.updatePackageJson_(app, targetPath, (config) => packageConfig.addPackages(config, options));    \n\n    await steps.npmInstall_(app, options.workingPath, options);\n};\n"],"file":"index.js"}