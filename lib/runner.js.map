{"version":3,"sources":["../src/runner.js"],"names":["path","require","fs","appModes","appModeList","exitWithError","tryDo_","download_","getTempPath","pkg","overrideOptions","options","cmd","validatedArgs","Object","assign","option","skipNpmInstall","disablePackageLock","publicMode","workingPath","process","cwd","getInitiator_","app","appMode","indexOf","Error","validateArguments","appDir","argv","_","appName","split","length","includes","module","exports","commandLine","showUsage","console","log","version","showBannar","map","item","value","name","join","configFile","existsSync","readJsonSync","init_"],"mappings":"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","sourcesContent":["const path = require(\"path\");\nconst { fs } = require(\"@genx/sys\");\n\nconst { appModes, appModeList } = require(\"./modes\");\nconst exitWithError = require(\"./utils/exitWithError\");\nconst tryDo_ = require(\"./utils/tryDo_\");\nconst download_ = require(\"./utils/download_\");\nconst getTempPath = require(\"./utils/getTempPath\");\n\nconst pkg = require('../package.json');\n\nfunction overrideOptions(options, cmd, validatedArgs) {\n    Object.assign(options, validatedArgs);\n    \n    if (cmd.option(\"skip-install\")) {\n        options.skipNpmInstall = true;\n    }\n\n    if (cmd.option(\"lock\")) {\n        delete options.disablePackageLock;\n    }\n\n    if (cmd.option(\"public\")) {\n        options.publicMode = true;\n    }\n\n    options.workingPath = process.cwd();      \n}\n\nasync function getInitiator_(app, appMode) {\n    if (appMode.indexOf(\"://\") > 0) {\n        //remote boilerplate\n        //const targetFile = getTempPath('boilerplate.zip');\n        //await download_(app, appMode, targetFile);  \n        throw new Error('To be implemented');\n\n        //return undefined;\n    }\n\n    return require(`./builtins/${appMode}`);\n}\n\nfunction validateArguments(app, cmd) {\n    const appDir = cmd.argv._[0];\n    const appName = cmd.option(\"name\");\n    const appMode = cmd.option(\"mode\");\n    \n    if (appDir.indexOf(\"/\") !== -1 || appDir.indexOf(\"\\\\\") !== -1) {\n        exitWithError(app, \"App directory should not contain path separator.\");\n    }\n\n    if (appName.indexOf(\" \") !== -1) {\n        exitWithError(app, \"App name should not contain any space character.\");\n    }\n\n    if (appName.split(\"/\").length > 2) {\n        exitWithError(app, 'App name should not contain more than one \"/\" character.');\n    }\n\n    if (!appModes.includes(appMode)) {\n        exitWithError(app, `Unsupported app mode: ${appMode}`);\n    }\n\n    return {\n        appDir,\n        appName,\n        appMode,\n    };\n}\n\nmodule.exports = async (app) => {\n    const cmd = app.commandLine;\n\n    if (cmd.option(\"help\")) {\n        cmd.showUsage();\n        return;\n    }\n\n    if (cmd.option(\"version\")) {\n        console.log(pkg.version);\n        return;\n    }\n\n    if (cmd.option(\"list-modes\")) {\n        cmd.showBannar();\n        \n        console.log(`All available app modes:\\n\\n  - ${appModeList.map(item => `${item.value}: ${item.name}`).join('\\n  - ')}\\n`);        \n        return;\n    }\n\n    const validatedArgs = validateArguments(app, cmd);    \n\n    let options;\n\n    const configFile = cmd.option(\"config\");\n    if (configFile && fs.existsSync(configFile)) {\n        options = fs.readJsonSync(configFile);\n    } else {\n        options = {};\n    }\n\n    //override options with command line arguments\n    overrideOptions(options, cmd, validatedArgs);    \n\n    //load initiator by url or app mode\n    const init_ = await getInitiator_(app, validatedArgs.appMode);\n\n    //ensure project folder exists\n    return tryDo_(app, () => {\n        return init_(app, options);\n    });\n};\n"],"file":"runner.js"}