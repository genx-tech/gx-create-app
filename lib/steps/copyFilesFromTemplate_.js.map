{"version":3,"sources":["../../src/steps/copyFilesFromTemplate_.js"],"names":["path","require","fs","glob","eachAsync_","copyFileFromTemplate_","module","exports","app","templatePath","targetPath","options","skipOverriding","files","cwd","dot","relativePath","sourceFile","join","destFile","ls","lstat","isDirectory","ensureDir","endsWith","slice","existsSync","log","ensureFile","copyFile"],"mappings":";;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,IAAeF,OAAO,CAAC,WAAD,CAA5B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAiBH,OAAO,CAAC,YAAD,CAA9B;;AAEA,MAAMI,qBAAqB,GAAGJ,OAAO,CAAC,gCAAD,CAArC;;AAEAK,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,YAAZ,EAA0BC,UAA1B,EAAsCC,OAAtC,EAA+CC,cAA/C,KAAkE;AAC/E,QAAMC,KAAK,GAAG,MAAMV,IAAI,CAAC,QAAD,EAAW;AAAEW,IAAAA,GAAG,EAAEL,YAAP;AAAqBM,IAAAA,GAAG,EAAE;AAA1B,GAAX,CAAxB;AACA,QAAMX,UAAU,CAACS,KAAD,EAAQ,MAAOG,YAAP,IAAwB;AAC5C,QAAIC,UAAU,GAAGjB,IAAI,CAACkB,IAAL,CAAUT,YAAV,EAAwBO,YAAxB,CAAjB;AACA,QAAIG,QAAQ,GAAGnB,IAAI,CAACkB,IAAL,CAAUR,UAAV,EAAsBM,YAAtB,CAAf;AAEA,UAAMI,EAAE,GAAG,MAAMlB,EAAE,CAACmB,KAAH,CAASJ,UAAT,CAAjB;;AACA,QAAIG,EAAE,CAACE,WAAH,EAAJ,EAAsB;AAClB,YAAMpB,EAAE,CAACqB,SAAH,CAAaJ,QAAb,CAAN;AACA;AACH;;AAED,QAAIH,YAAY,CAACQ,QAAb,CAAsB,MAAtB,CAAJ,EAAmC;AAC/BL,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACAT,MAAAA,YAAY,GAAGA,YAAY,CAACS,KAAb,CAAmB,CAAnB,EAAsB,CAAC,CAAvB,CAAf;;AAEA,UAAIb,cAAc,IAAIV,EAAE,CAACwB,UAAH,CAAcP,QAAd,CAAtB,EAA+C;AAC3CX,QAAAA,GAAG,CAACmB,GAAJ,CAAQ,MAAR,EAAiB,oBAAmBX,YAAa,EAAjD;AACA;AACH;;AAED,YAAMd,EAAE,CAAC0B,UAAH,CAAcT,QAAd,CAAN;AACA,YAAMd,qBAAqB,CAACY,UAAD,EAAaE,QAAb,EAAuBR,OAAvB,CAA3B;AACAH,MAAAA,GAAG,CAACmB,GAAJ,CAAQ,MAAR,EAAiB,WAAUX,YAAa,EAAxC;AACA;AACH;;AAED,QAAIJ,cAAc,IAAIV,EAAE,CAACwB,UAAH,CAAcP,QAAd,CAAtB,EAA+C;AAC3CX,MAAAA,GAAG,CAACmB,GAAJ,CAAQ,MAAR,EAAiB,oBAAmBX,YAAa,EAAjD;AACA;AACH;;AAED,UAAMd,EAAE,CAAC0B,UAAH,CAAcT,QAAd,CAAN;AACA,UAAMjB,EAAE,CAAC2B,QAAH,CAAYZ,UAAZ,EAAwBE,QAAxB,CAAN;AACAX,IAAAA,GAAG,CAACmB,GAAJ,CAAQ,MAAR,EAAiB,UAASX,YAAa,EAAvC;AACH,GAjCe,CAAhB;AAkCH,CApCD","sourcesContent":["const path = require(\"path\");\nconst { fs, glob } = require(\"@genx/sys\");\nconst { eachAsync_ } = require(\"@genx/july\");\n\nconst copyFileFromTemplate_ = require(\"../utils/copyFileFromTemplate_\");\n\nmodule.exports = async (app, templatePath, targetPath, options, skipOverriding) => {\n    const files = await glob(\"**/*.*\", { cwd: templatePath, dot: true });\n    await eachAsync_(files, async (relativePath) => {\n        let sourceFile = path.join(templatePath, relativePath);\n        let destFile = path.join(targetPath, relativePath);\n\n        const ls = await fs.lstat(sourceFile);\n        if (ls.isDirectory()) {\n            await fs.ensureDir(destFile);\n            return;\n        }\n\n        if (relativePath.endsWith(\".tpl\")) {\n            destFile = destFile.slice(0, -4);\n            relativePath = relativePath.slice(0, -4);\n\n            if (skipOverriding && fs.existsSync(destFile)) {\n                app.log('info', `Skipped existing ${relativePath}`);       \n                return;\n            }\n\n            await fs.ensureFile(destFile);\n            await copyFileFromTemplate_(sourceFile, destFile, options);     \n            app.log('info', `Created ${relativePath}`);       \n            return;\n        }\n\n        if (skipOverriding && fs.existsSync(destFile)) {\n            app.log('info', `Skipped existing ${relativePath}`);       \n            return;\n        }\n\n        await fs.ensureFile(destFile);\n        await fs.copyFile(sourceFile, destFile);\n        app.log('info', `Copied ${relativePath}`);       \n    });\n};\n"],"file":"copyFilesFromTemplate_.js"}